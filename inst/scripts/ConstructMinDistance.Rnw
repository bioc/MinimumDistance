<<loadBeadStudio, eval=FALSE>>=
bsSet <- checkExists("bsSet", .path=outdir, .FUN=load)
invisible(open(logR(bsSet)))
invisible(open(baf(bsSet)))
bsSet$pedId <- who(sampleNames(bsSet))
sampleNames(bsSet) <- substr(sampleNames(bsSet), 1, 8)
offspring.index <- which(bsSet$pedId=="offspring")
@

<<>>=
data(bsSet)
@


<<initializeSet, eval=FALSE>>=
CN <- initializeBigMatrix("cn", nr=nrow(bsSet), nc=length(offspring.index), vmode="double")
rownames(CN) <- featureNames(bsSet)
colnames(CN) <- sampleNames(bsSet)[offspring.index]
minDistanceSet <- new("CopyNumberSet",
		      copyNumber=CN,
		      featureData=featureData(bsSet),
		      phenoData=phenoData(bsSet)[offspring.index, ],
		      annotation=annotation(bsSet))
save(minDistanceSet, file=file.path(ldPath(), "minDistanceSet.rda"))
@

<<replacemethod>>=

data(minDistanceSet)
minDistanceSet <- checkExists("minDistanceSet", .path=ldPath(), .FUN=load)
@


<<minDistanceSet>>=
sns <- sampleNames(bsSet)[offspring.index]
sns.all <- sampleNames(bsSet)
for(j in seq_along(sns)){
	offspring.name <- sns[j]
	family <- substr(offspring.name, 1, 5)
	father.name <- paste(family, "03", sep="_")
	father.index <- match(father.name, sns.all)
	mother.name <- paste(family, "02", sep="_")
	mother.index <- match(mother.name, sns.all)
	offspring.index <- match(offspring.name, sns.all)
	lR <- as.matrix(logR(bsSet)[, c(mother.index, father.index)])
	resid <- lR - logR(bsSet)[, offspring.index]
	resid[is.na(resid)] <- 0
	min.resid <- rowMin(resid)
	copyNumber(minDistanceSet)[, j] <- min.resid
	if(j %% 100 == 0) cat(j, " ")
}
invisible(open(copyNumber(minDistanceSet)))
mads <- rep(NA, ncol(minDistanceSet))
for(j in seq_along(mads)) mads[j] <- mad(copyNumber(minDistanceSet)[, j], na.rm=TRUE)
minDistanceSet$Mad <- mads
invisible(close(copyNumber(minDistanceSet)))
save(minDistanceSet, file=file.path(outdir, "minDistanceSet.rda"))
@
