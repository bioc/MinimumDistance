<<>>=
library(Beaty)
ldPath(beadstudiodir())
data(deletion.ranges_test)
data(amp.ranges_test)
data(rf)
data(cnv)
data(bsSet)
data(penn.joint)
@


<<data>>=
ranges.all <- combineRanges(deletion.ranges, amp.ranges)
ranges.all <- ranges.all[ranges.all$num.mark >= 3, ]
palette <- brewer.pal(9, "Set1")[1:3]
dist.df <- data.frame.for.rectangles(ranges.all, palette=palette)
penn.denovo <- getPennDenovo(penn.joint)
##penn.denovo <- penn.denovo[penn.denovo$num.mark >= 10, ]
penn.denovo <- penn.denovo[penn.denovo$num.mark >= 3, ]
penn.df <- data.frame.for.rectangles(penn.denovo, palette)
combined.df <- combine.data.frames(dist.df, penn.df)
@

<<trellis>>=
palette <- brewer.pal(9, "Set1")[1:3]
mykey <- simpleKey(c("homo-del", "hemi-del", "amp"), points=FALSE,
		   rectangles=TRUE, col=palette[1:3], space="top")
dist.chr.lim <- xyplot(y~midpoint|chr, data=dist.df,
		       panel=my.rectangle,
		       x0=dist.df$x0,
		       x1=dist.df$x1,
		       y0=dist.df$y0,
		       y1=dist.df$y1,
		       col=dist.df$col,
		       border=dist.df$col,
		       alpha=1,
		       chr.size=dist.df$chr.size,
		       scales=list(y="free", x="free", rot=0),
		       coverage=dist.df$coverage, xlab="Mb", ylab="offspring index",
		       show.coverage=FALSE, key=mykey,
		       par.strip.text=list(lines=0.7, cex=0.6),
		       prepanel=prepanel.fxn)
penn.chr.lim <- xyplot(y~midpoint|chr, data=penn.df, panel=my.rectangle,
		       x0=penn.df$x0,
		       x1=penn.df$x1,
		       y0=penn.df$y0,
		       y1=penn.df$y1,
		       col=penn.df$col,
		       border=penn.df$col,
		       alpha=1,
		       chr=penn.df$chr,
		       chr.size=penn.df$chr.size,
		       scales=list(y="free", x="free", rot=0),
		       coverage=penn.df$coverage, xlab="Mb", ylab="offspring index",
		       show.coverage=FALSE, key=mykey,
		       par.strip.text=list(lines=0.7, cex=0.6),
		       prepanel=prepanel.fxn)

dist.packet.lim <- xyplot(y~midpoint|chr, data=dist.df, panel=my.rectangle,
			  x0=dist.df$x0,
			  x1=dist.df$x1,
			  y0=dist.df$y0,
			  y1=dist.df$y1,
			  col=dist.df$col,
			  border=dist.df$col,
			  alpha=1,
			  chr.size=dist.df$chr.size,
			  scales=list(y="free", x="free", rot=0),
			  coverage=dist.df$coverage, xlab="Mb", ylab="offspring index",
			  show.coverage=FALSE, key=mykey,
			  par.strip.text=list(lines=0.7, cex=0.6))

penn.packet.lim <- xyplot(y~midpoint|chr, data=penn.df,
			  panel=my.rectangle,
			  x0=penn.df$x0,
			  x1=penn.df$x1,
			  y0=penn.df$y0,
			  y1=penn.df$y1,
			  col=penn.df$col,
			  border=penn.df$col,
			  alpha=1,
			  chr.size=penn.df$chr.size,
			  scales=list(y="free", x="free", rot=0),
			  coverage=penn.df$coverage, xlab="Mb", ylab="offspring index",
			  show.coverage=FALSE, key=mykey,
			  par.strip.text=list(lines=0.7, cex=0.6))

	by.chrom <- xyplot(y~midpoint|method+chr, data=combined.df, panel=my.rectangle,
			   x0=combined.df$x0,
			   x1=combined.df$x1,
			   y0=combined.df$y0,
			   y1=combined.df$y1,
			   col=combined.df$col,
			   border=combined.df$col,
			   alpha=1,
			   chr.size=combined.df$chr.size,
			   scales=list(y="free", x="free", rot=0),
			   coverage=combined.df$coverage, xlab="Mb", ylab="offspring index",
			   show.coverage=FALSE, key=mykey,
			   par.strip.text=list(lines=0.7, cex=0.6),
			   layout=c(1, 2, 22),
			   ##		   layout=c(22, 2),
			   prepanel=prepanel.fxn2,
			   min=combined.df$min, max=combined.df$max,
			   chr=combined.df$chr,
			   plot.cytoband=TRUE)

chrom.fig <- list()
for(CHR in 1:22){
	combined.chr <- combined.df[combined.df$chr == CHR, ]
	chrom.fig[[CHR]] <- xyplot(y~midpoint|method+chr, data=combined.chr, panel=my.rectangle,
			   x0=combined.chr$x0,
			   x1=combined.chr$x1,
			   y0=combined.chr$y0,
			   y1=combined.chr$y1,
			   col=combined.chr$col,
			   border=combined.chr$col,
			   alpha=1,
			   chr.size=combined.chr$chr.size,
			   scales=list(y="free", x="same", rot=0),
			   coverage=combined.chr$coverage, xlab="Mb", ylab="offspring index",
			   show.coverage=FALSE, key=mykey,
			   par.strip.text=list(lines=0.7, cex=0.6),
				  ##layout=c(1, 2, 22),
				  layout=c(1, 2),
			   ##		   layout=c(22, 2),
			   prepanel=prepanel.fxn2,
			   min=combined.chr$min, max=combined.chr$max,
			   chr=combined.chr$chr,
			   plot.cytoband=TRUE) ##columns, rows, pages
}

@

<<device>>=
##trellis.device(device="pdf", file="figures/rectangles_distance_%02d.pdf", width=10, height=10,
##	       onefile=FALSE)
trellis.device(device="pdf", file="figures/rectangles_distance_test_%02d.pdf", width=10, height=10,
	       onefile=FALSE)
pars <- trellis.par.get()
pars$axis.text$cex <- 0.5
trellis.par.set("axis.text", pars$axis.text)
print(dist.chr.lim)
print(penn.chr.lim)
print(dist.packet.lim)
print(penn.packet.lim)
for(i in 1:22) print(chrom.fig[[i]])
dev.off()
stop()
@


How to cluster the rows of the pictures?
- the data is start and stop coordinates that take on one of three values
- for each segment, we know the coverage.
- would it be calculating the disjoint ranges.  Then converting each
range to be 0 (homo-del),1 (hemi-del), 2 (normal), 3 (amp)

- find the unique marker positions for a chromosome
  create IRanges object with start=snp.position-12, end=snp.position+12
  use findOverlaps to get the indices of the segments.

