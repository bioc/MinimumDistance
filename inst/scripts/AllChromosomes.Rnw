<<loadBeadStudio>>=
bsSet <- checkExists("bsSet", .path=outdir, .FUN=load)
invisible(open(logR(bsSet)))
invisible(open(baf(bsSet)))
offspring.rule <- function(MAD) ifelse(-1.5*MAD < log(1.5/2), -1.5*MAD, log(1.5/2))
parent.rule <- function()  log(1.8/2)
@

<<centromereRanges>>=
library(SNPchip)
data(chromosomeAnnotation)
centromere.ranges <- GRanges(seqnames=Rle(paste("chr", 1:22, sep=""), rep(1,22)),
			     ranges=IRanges(chromosomeAnnotation[1:22, "centromereStart"],
			     chromosomeAnnotation[1:22, "centromereEnd"]))
@

<<allchrom>>=
##MINOVERLAP <- 2
##MIN.DELETION.SIZE <- 10  # the minimum size of deletion event in offspring
##OVERLAP.PERCENT <- 0.50  # if 50% of the range (or more) is deleted in the parent, it is not denovo.  Otherwise, it is potentially denovo.
##PROP.HET <- 0.1
##PROP.THR <- 0.25  ## mother / father must have fewer than PROP.THR * 100% of the markers in a region with logR values below parent.rule
disjointRangesList <- vector("list", 22)
for(CHR in 1:22){
 	cat(CHR, "\n")
	segmean_ranges <- getSegMeans(outdir, CHR=CHR)
	which.markers <- which(chromosome(bsSet) == CHR)
	lset <- new("LogRatioSet",
		    logRRatio=as.matrix(logR(bsSet)[which.markers, ]),
		    BAF=as.matrix(baf(bsSet)[which.markers,]),
		    featureData=featureData(bsSet)[which.markers, ],
		    phenoData=phenoData(bsSet),
		    annotation=annotation(bsSet))
	lset$pedId <- who(sampleNames(lset))
	lset$family <- substr(sampleNames(lset), 1, 5)
	segmean_ranges <- segmean_ranges[segmean_ranges$id %in% sampleNames(lset), ]
	segmean_ranges$is.deletion <- callDeletion(segmean_ranges, lset, parent.rule, offspring.rule)
	deletion.ranges <- segmean_ranges[segmean_ranges$is.deletion, ]
	## ---------------------------------------------------------------------------
	## remove deletion.ranges that span centromeres.
	##
	## a cleaner solution would be to force a break at the start of the centromere
	## ---------------------------------------------------------------------------
	deletion.ranges <- removeCentromereRanges(deletion.ranges, centromere.ranges, CHR)
	disjoint.ranges <- disjointRanges(deletion.ranges)
	## ---------------------------------------------------------------------------
	##
	## call denovo events
	##
	## ---------------------------------------------------------------------------
##	trace(callDenovo, browser)
##	i1 <- grep("11005_01", sampleNames(lset))
##	i2 <- grep("11005_02", sampleNames(lset))
##	i3 <- grep("11005_03", sampleNames(lset))
##	##independent samples  are highly correlated (probe effect)
##	##remove probe effect by median-centering
##	meds=rowMedians(logR(lset), na.rm=TRUE)
##	logR2 <- logR(lset) - meds
##	cor(logR2[, i2], logR2[,i3], use="complete.obs")
##	cor(logR(lset)[, i2], logR(lset)[,i3], use="complete.obs")
##
##	delta.parent <- logR(lset)[, 1] - logR(lset)[, 2]
##	delta.off <- matrix(NA, nrow(lset), 2)
##	delta.off[, 1] <- logR(lset)[, 1] - logR(lset)[, 3]
##	delta.off[, 2] <- logR(lset)[, 2] - logR(lset)[, 3]
##	tmp <- apply(abs(delta.off), 1, which.min)
##	col1 <- which(tmp == 1)
##	col2 <- which(tmp == 2)
##	deltas <- rep(NA, nrow(lset))
##	delta[col1] <- delta.off[col1, 1]
##	delta[col2] <- delta.off[col2, 2]
##
##
##	par(mfrow=c(4,1), mar=c(0.5, 4, 0.5, 0.5))
##	ylim=c(-1.5, 1)
####	plot(position(lset), logR(lset)[,2], pch=".", xaxt="n", ylim=ylim)
####	plot(position(lset), logR(lset)[,1], pch=".", xaxt="n", ylim=ylim)
####	plot(position(lset), delta.parent, pch=".", ylim=ylim)
####	plot(position(lset), delta.off1, pch=".", ylim=ylim)
####	plot(position(lset), delta.off2, pch=".", ylim=ylim)
##	plot(position(lset), logR(lset)[,1], pch=".", ylim=ylim)
##	plot(position(lset), logR(lset)[,2], pch=".", ylim=ylim)
##	plot(position(lset), logR(lset)[,3], pch=".", ylim=ylim)
##	plot(position(lset), delta, pch=".", ylim=ylim)
##
##	plot(logR(lset)[,1], delta, pch=".", ylim=c(-2,2), xlim=c(-2,2))
##	plot(logR(lset)[,2], delta, pch=".", ylim=c(-2,2), xlim=c(-2,2))
##	cor(logR(lset)[,1], delta, use="complete.obs")
##	cor(logR(lset)[,2], delta, use="complete.obs")
##	cor(logR(lset)[,2], logR(lset)[,3], use="complete.obs")
##	cor(logR(lset)[,1], logR(lset)[,3], use="complete.obs")
##

	denovo.ranges <- callDenovoAllTrios(deletion.ranges, disjoint.ranges, epsilon=1e3)
	## ---------------------------------------------------------------------------
	##
	## calculate statisitcs from the denovo.ranges for ranking
	##   - how many offspring is a range denovo
	##   - what is the median size of the deletion even in the offspring
	##   - what is the median coverage
	##   - what is the median proportion of overlap of the offspring deletion with parent deletions in the region (harder -- need disjoint ranges that are in the parents)
	##
	## ---------------------------------------------------------------------------
	## trace(statisticsForRanking, browser)
	gr <- statisticsForRanking(denovo.ranges, disjoint.ranges)
	disjointRangesList[[CHR]] <- gr
	index <- which(gr$freq > 10 & gr$median.coverage > 10)
	index <- split(index, gr$region[index])
	index <- sapply(index, function(x) x[1])
	if(length(index) > 0){
		bitmap(paste("tmp_chr", CHR, "_%02d.png", sep=""), width=8, height=6, res=300)
		for(i in seq_along(index)){
			layout(matrix(1:6, 6,1), heights=c(1, 1, 1, 1, 1, 1, 0.25))
			par(mar=c(0.5, 0.5, 0.5, 0.5), las=1, oma=c(4, 4, 4, 4))
			objs <- plotRangeWrapper(i=index[i],  chrSet=lset, Ranges=gr, segmeans=segmean_ranges, FRAME=1e6)
		}
		dev.off()
	}
	rm(objs); gc()
}
save(disjointRangesList, file=file.path(outdir, "disjointRangesList.rda"))
## Check the 3rd region in chromosome 1, offspring 2, 3:  father has deletion and is homozygous
## offspring 5 is why we need to take into account the joint distribution...
q("no")
@

<<centromereRanges>>=
load(file.path(outdir, "disjointRangesList.rda"))
gr <- do.call("c", disjointRangesList)

@
<<>>=
##Ranges that are big because they span centromeres
query.index <- matchMatrix(findOverlaps(gr, centromere.ranges))[, "query"]
index <- which(gr$freq > 10 & gr$median.coverage > 10)
index <- split(index, gr$region[index])
index <- sapply(index, function(x) x[1])
intersect(index, query.index)
@

<<exit>>=
invisible(close(logR(bsSet)))
invisible(close(baf(bsSet)))
q("no")
@

<<sizeFreqChr6, fig=TRUE>>=

par(las=1)
plot(disjoint.RD$median.size/1e3, disjoint.RD$freq, pch=21, cex=0.7, ylab="frequency", xlab="median size (kb)",
     main="Chr 22")
(index <- which(disjoint.RD$freq > 10 & disjoint.RD$median.size > 1e6))
@

<<>>=
index <- which(gr$freq > 10 & gr$median.coverage > 10)
index <- split(index, gr$region[index])
index <- sapply(index, function(x) x[1])
##trace(plotRangeWrapper, browser)
segmean_ranges <- getSegMeans(outdir, CHR=1)
segmean_ranges <- RangedData(IRanges(segmean_ranges$pos.start,
				     segmean_ranges$pos.end),
			     id=segmean_ranges$id,
			     chrom=segmean_ranges$chrom,
			     num.mark=width(segmean_ranges), ## would be number of markers that were not NAs (I think)
			     seg.mean=segmean_ranges$seg.mean,
			     pedId=who(segmean_ranges$id))
objs <- plotRangeWrapper(i=index[1],  chrSet=bsSet, Ranges=gr, segmeans=segmean_ranges, FRAME=1e6)

library("GenomicFeatures")
hh <- makeTranscriptDbFromUCSC(genome = "hg18", tablename = "knownGene")
tmp <- transcripts(hh)
saveFeatures(tmp, file="tmp.sqlite")
##
tmp <- loadFeatures("tmp.sqlite")
tmp <- transcripts(txdb, vals <- list(tx_chrom = "chr22", tx_strand = "+"))
length(GR)
unique(strand(GR))
gr <- GRanges(
    seqnames = rep("chr5",4),
    ranges = IRanges(start = c(244620, 244670, 245804, 247502),
                     end = c(244652, 244702, 245836, 247534)),
    strand = rep("+", 4))
samplefile <- system.file("extdata", "UCSC_knownGene_sample.sqlite",
                          package="GenomicFeatures")
txdb <- loadFeatures(samplefile)
transcriptsByOverlaps(txdb, gr)

##library(GenomeGraphs)
##mart <- useMart("ensembl", dataset="hsapiens_gene_ensembl")
##plusStrand <- makeGeneRegion(chromosome = CHR, start = min(position(lset)), end = max(position(lset)), strand = "+", biomart = mart)
##genomeAxis <- makeGenomeAxis(add53 = TRUE)
##gdPlot(list(genomeAxis, plusStrand))
####add genes on negative stand as well as an idiogram
##minStrand <- makeGeneRegion(chromosome = CHR, start = min(position(lset)), end = max(position(lset)), strand = "-", biomart = mart)
##ideogram <- makeIdeogram(chromosome = CHR)
##genomeAxis <- makeGenomeAxis(add53=TRUE, add35=TRUE)
##gdPlot(list(ideogram, plusStrand, genomeAxis, minStrand), minBase = min(position(lset)), maxBase =  max(position(lset)))
@
