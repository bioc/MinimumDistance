<<>>=
stopifnot(exists("CHR"))
stopifnot(exists("save.figs"))
if(!exists("v")) v <- 1
@

<<genomic.annotations>>=
chr.name <- paste("chr", CHR, sep="")
##trace(getGenomicAxis, browser)
if(!exists("xlim")){
	xlim <- getGenomicAxis(deletion.ranges, CHR=CHR, FRAME=1e6)
}
del <- deletion.ranges[deletion.ranges$chrom == CHR, ]
del <- del[start(del) <= xlim[2] & end(del) >= xlim[1], ]
jug <- jugessur[start(jugessur) <= xlim[2] & end(jugessur) >= xlim[1] & jugessur$chrom==CHR, ]
data(rf)
rf.chr <- rf[rf$txStart <= xlim[2] & rf$txEnd >= xlim[1] & rf$chrom==chr.name, ]
data(cnv)
cnv.chr <- cnv[cnv$txStart <= xlim[2] & cnv$txEnd >= xlim[1] & cnv$chrom==chr.name, ]
flatBed <- flatten.bed(rf.chr)
flatBed.cnv <- flatten.bed(cnv.chr)
@

<<grid.rectangleplot>>=
del <- del[order(del$id), ]
ids <- del$id
ids <- split(ids, ids)
ids <- ids[match(unique(del$id), names(ids))]
starts <- start(del)
ends <- end(del)
yy <- (1:(length(ids)+2))/(length(ids)+2)
y <- yy[-c(1, length(yy))]
y <- rep(y, sapply(ids, length))
sp <- diff(yy[1:2])/2


## rectangle regions using graphical objects in grid
if(save.figs) pdf(paste("figures/rectanglePlot_", chr.name, "_v", v, ".pdf", sep=""), onefile=FALSE)
layout <- grid.layout(3, 1, heights=unit(c(1, 0.2, 0.2), c("null", "null", "null")))
grid.newpage()
pushViewport(viewport(layout=layout))
pushViewport(viewport(layout.pos.row=1, name="row1"))
pushViewport(plotViewport(c(2,4,2,2)))  ## rectangular region with space in lines to the bottom, left, top and right
sts <- sapply(starts, function(x) x[[1]])
eds <- sapply(ends, function(x) x[[1]])
pushViewport(dataViewport(c(sts/1e6, unlist(ends)/1e6), rep(y, each=2), xscale=xlim/1e6,
			  yscale=c(0, 1), name="plotRegion"))
grid.rect(x=starts/1e6, y=y, height=sp, width=width(del)/1e6,
	  default.units="native", gp=gpar("fill"="grey60"), name="cnv.regions", just=c("left", "center"))
grid.rect(gp=gpar("col"="grey50"))
grid.xaxis(gp=gpar("cex"=0.7), at=pretty(xlim/1e6, n=10))
yax <- yaxisGrob(at=y, label=del$id, gp=gpar("cex"=0.7), name="ylabs")
editGrob(yax, "labels", just="bottom")
grid.draw(yax)
panel.grid(h = -1, v = 10, col = "grey", lty = 3)
upViewport()
grid.text(paste("Chromosome", CHR), y=unit(1.05, "native"), just="top")
if(nrow(jug) > 0){
	grid.rect(x=start(jug)/1e6, y=rep(yy[1], nrow(jug)), height=sp, width=width(jug)/1e6,
		  default.units="native", gp=gpar("fill"="lightblue"), name="jug.regions", just=c("left", "top"), vp="plotRegion")
	grid.lines(y=yy[1]+sp, default.units="native", gp=gpar("lty"=2), vp="plotRegion")
	grid.text("Jugessur", gp=gpar("col"="blue"), y=unit(yy[1]+sp, "native"), x=unit(xlim[1]/1e6, "native"), just=c("left", "bottom"), vp="plotRegion")
}
grid.text(label=as.character(del$num.mark), vp="plotRegion",
	  y=unit(y, "native"),
	  x=unit(ends/1e6+0.1, "native"), gp=gpar("cex"=0.7))
upViewport(0)

mn <- min(flatBed$start)
mx <- max(flatBed$stop)
pushViewport(viewport(layout=layout))
pushViewport(viewport(layout.pos.row=2, name="genes", clip="on"))
pushViewport(plotViewport(c(0, 4, 0,2)))  ## needs to be exact same as above
pushViewport(dataViewport(xscale=xlim/1000, yscale=c(0,1), clip="on"))
panel.flatbed(flat=flatBed, showIso=FALSE, cex=0.6, rows=6)
upViewport(0)
mn <- min(flatBed.cnv$start)
mx <- max(flatBed.cnv$stop)
pushViewport(viewport(layout=layout))
pushViewport(viewport(layout.pos.row=3, name="genes", clip="on"))
pushViewport(plotViewport(c(0, 4, 0,2)))  ## needs to be exact same as above
pushViewport(dataViewport(xscale=xlim/1000, yscale=c(0,1), clip="on"))
panel.flatbed(flat=flatBed.cnv, showIso=FALSE, cex=0.6, rows=6, col="red", fill="red")
upViewport(1)
if(save.figs) dev.off()
@



<<grid.lowlevel>>=
index <- which(deletion.ranges$chrom == CHR & deletion.ranges$id %in% del$id & start(deletion.ranges) <= xlim[2] & end(deletion.ranges) >= xlim[1])
index <- index[unlist(sapply(del$id, function(x,y) grep(x, y), y=deletion.ranges$id[index]))]
ids <- deletion.ranges$id[index]
unique.ids <- unique(ids)
index <- split(index, ids)
index <- index[match(unique.ids, names(index))]
index <- lapply(index, unique)
myPanel <- function(x,y, subscripts, ...){
	panel.xyplot(x, y, ...)
	panel.grid(h = 10, v = 10, col = "grey", lty = 3)
}
open(minDistanceSet$MAD)
if(save.figs) pdf(paste("figures/lowlevel_", chr.name, "_v", v, "_%02d.pdf", sep=""), width=10, height=7, onefile=FALSE)
for(j in seq_along(index)){
	cat("Fig ", j, "\n")
	i <- index[[j]][1]
	mset <- constructTrioSetFromRanges(deletion.ranges[i, ], minDistanceSet,
					   bsSet, xlim=xlim)
	if(exists("cbs.segs")){
		if(CHR != unique(cbs.segs$chrom))
			load(file.path(beadstudiodir(), paste("cbs_chr" , CHR, ".rda", sep="")))
	} else 	load(file.path(beadstudiodir(), paste("cbs_chr" , CHR, ".rda", sep="")))
	grid.obj <- data.frame(logR=c(logR.F(mset),
			       logR.M(mset),
			       logR.O(mset),
			       -mindist(mset)),
			       x=rep(position(mset)/1e6, 4),
			       subject=factor(rep(1:4, each=nrow(mset)), labels=c("Father", "Mother", "Offspring", "min distance"), ordered=TRUE))
	nn <- sum(grid.obj$logR < -2, na.rm=TRUE)
	if(nn > 10) {
		ii <- which(grid.obj$logR < -5)
		grid.obj$logR[ii] <- jitter(rep(-5, length(ii)),  amount=0.5)
	} else {
		ii <- which(grid.obj$logR < -2)
		if(length(ii) > 0){
			grid.obj$logR[ii] <- jitter(rep(-2, length(ii)),  amount=0.5)
		}
	}
	nn <- sum(grid.obj$logR > 1, na.rm=TRUE)
	if(nn > 10) {
		ii <- which(grid.obj$logR > 2)
		grid.obj$logR[ii] <- jitter(rep(2, length(ii)),  amount=0.5)
	} else {
		ii <- which(grid.obj$logR > 1)
		if(length(ii) > 0){
			grid.obj$logR[ii] <- jitter(rep(1, length(ii)),  amount=0.5)
		}
	}
	grid.obj2 <- data.frame(baf=c(baf.F(mset),
			       baf.M(mset),
			       baf.O(mset)),
			       x=rep(position(mset)/1e6, 3),
			       subject=factor(rep(1:3, each=nrow(mset)), labels=c("Father", "Mother", "Offspring"), ordered=TRUE))
	grid.newpage()
	plot.logr <- xyplot(logR ~ x | subject, data=grid.obj, pch=21, cex=0.3, layout=c(1,4), index.cond=list(4:1), xlab="Mb",
			    ylab="")
	st <- start(deletion.ranges[i, ])/1e6
	en <- end(deletion.ranges[i,])/1e6
	plot.baf <- xyplot(baf ~ x | subject, data=grid.obj2, pch=21, cex=0.3, layout=c(1,3), index.cond=list(3:1),
			   xlab="",
			   ylab="")
	print(plot.logr, position=c(0, 0, 0.5, 1), more=TRUE)
	grid.text("Log R Ratio", x=unit(0.25, "npc"), y=unit(0.97, "npc"), gp=gpar("cex"=1.1))
	grid.text(paste("Family", sampleNames(mset)), x=unit(0.5, "npc"), y=unit(0.98, "npc"), gp=gpar("cex"=1.2))

	trellis.focus("panel", 1, 4, highlight = FALSE)
	panel.grid(h = 10, v = 10, col = "grey", lty = 3)
	cbs.sub <- cbs.segs[cbs.segs$id==paste(sampleNames(mset)[1], "03", sep="_"), ]
	panel.segments(x0=start(cbs.sub)/1e6, x1=end(cbs.sub)/1e6, y0=cbs.sub$seg.mean, y1=cbs.sub$seg.mean, lwd=2)#gp=gpar("lwd"=2))

	trellis.focus("panel", 1, 3, highlight = FALSE)
	panel.grid(h = 10, v = 10, col = "grey", lty = 3)
	cbs.sub=cbs.segs[cbs.segs$id==paste(sampleNames(mset)[1], "02", sep="_"), ]
	panel.segments(x0=start(cbs.sub)/1e6, x1=end(cbs.sub)/1e6, y0=cbs.sub$seg.mean, y1=cbs.sub$seg.mean, lwd=2)#gp=gpar("lwd"=2))

	trellis.focus("panel", 1, 2, highlight = FALSE)
	panel.grid(h = 10, v = 10, col = "grey", lty = 3)
	cbs.sub <- cbs.segs[cbs.segs$id==paste(sampleNames(mset)[1], "01", sep="_"), ]
	tmp <- panel.segments(x0=start(cbs.sub)/1e6, x1=end(cbs.sub)/1e6, y0=cbs.sub$seg.mean, y1=cbs.sub$seg.mean, lwd=2)#gp=gpar("lwd"=2))

        ranges.md <- minDistanceRanges[minDistanceRanges$chrom == CHR, ]
	ranges.md$seg.mean <- -1*ranges.md$seg.mean
	cbs.sub <- ranges.md[substr(ranges.md$id, 1, 5) %in% sampleNames(mset), ]
	trellis.focus("panel", 1, 1, highlight = FALSE)
	panel.grid(h = 10, v = 10, col = "grey", lty = 3)
	tmp <- panel.segments(x0=start(cbs.sub)/1e6, x1=end(cbs.sub)/1e6, y0=cbs.sub$seg.mean, y1=cbs.sub$seg.mean, lwd=2)#gp=gpar("lwd"=2))
	upViewport(0)

	## Plot BAFs
	print(plot.baf, position=c(0.5, 0.21,1, 1), more=TRUE)
	grid.text("B Allele Frequency", x=unit(0.75, "npc"), y=unit(0.97, "npc"), gp=gpar("cex"=1.1))

	## Plot Annotation
	upViewport(0)
	pushViewport(viewport(x=unit(0.75, "npc"),
			      y=unit(0.12, "npc"),
			      width=unit(0.5, "npc"),
			      height=unit(0.12, "npc"), just="bottom"))
	pushViewport(plotViewport(c(0, 3, 0,3)))  ## needs to be exact same as above
	pushViewport(dataViewport(xscale=xlim/1000, yscale=c(0,1), clip="on"))
##	grid.rect(gp=gpar("col"="grey70", "lwd"=2))
	panel.flatbed(flat=flatBed, showIso=FALSE, rows=5, cex=0.7)

	## plot cnp
	upViewport(0)
	pushViewport(viewport(x=unit(0.75, "npc"),
			      y=unit(0, "npc"),
			      width=unit(0.5, "npc"),
			      height=unit(0.12, "npc"), just="bottom"))
	pushViewport(plotViewport(c(0, 3, 0,3)))  ## needs to be exact same as above
	pushViewport(dataViewport(xscale=xlim/1000, yscale=c(0,1), clip="on"))
##	grid.rect(gp=gpar("col"="grey70", "lwd"=2))
	panel.flatbed(flat=flatBed.cnv, showIso=FALSE, rows=5, cex=0.7, col="red", fill="red")

	## Draw rectangle around interesting region
	upViewport(0)
	pushViewport(viewport(x=unit(0.75, "npc"),
			      y=unit(0.5, "npc"),
			      width=unit(0.5, "npc"),
			      height=unit(1, "npc")))
	pushViewport(plotViewport(c(0, 3, 0,3)))  ## needs to be exact same as above
	pushViewport(dataViewport(xscale=xlim/1e6, yscale=c(0,1), clip="on"))

	bg <- "lightblue"
	bg2 <- col2rgb(bg)/255
	fill <- rgb(bg2[1, ], bg2[2,], bg2[3,], alpha=0.1)
	for(k in seq_along(index[[j]])){
		ii <- index[[j]][k]
		st <- start(deletion.ranges[ii, ])/1e6
		en <- end(deletion.ranges[ii,])/1e6
		grid.rect(x=unit(st, "native"),
			  y=unit(0, "native"),
			  width=unit(en-st, "native"),
			  height=unit(1, "native"),
			  just=c("left", "bottom"), gp=gpar(col="grey80", "lwd"=2, fill=fill))
	}
}
if(save.figs) dev.off()
@
