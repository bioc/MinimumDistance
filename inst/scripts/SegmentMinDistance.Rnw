library(Beaty)
library(mybase)
library(DNAcopy)
library(crlmm)
outdir <- "/amber1/scratch/rscharpf/beaty_beadStudio"
if(!file.exists(outdir)) dir.create(outdir)
ldPath(outdir)
bsSet <- checkExists("bsSet", .path=outdir, .FUN=load)
invisible(open(logR(bsSet)))
invisible(open(baf(bsSet)))
sampleNames(bsSet) <- substr(sampleNames(bsSet), 1, 8)
bsSet$pedId <- who(sampleNames(bsSet))

if(!exists("batch")) stop("batch variable should be defined in the MinDistance.Rnw script")
if(!exists("NN")) stop("batch size variable (NN) should be specified in submitter script")


offspring.index <- which(bsSet$pedId=="offspring")
sample.index <- splitIndicesByLength(offspring.index, NN)##[[batch]]


for(j in seq_along(offspring.index)){


}

parent.index <- sample.index[lrSet$pedId[sample.index]=="father" | lrSet$pedId[sample.index]=="mother"]
offspring.index <- sample.index[lrSet$pedId[sample.index]=="offspring"]

## parents
marker.index <- which(chromosome(lrSet) == CHR & !duplicated(position(lrSet)))
open(logR(lrSet))
CNA.object <- CNA(genomdat=as.matrix(logR(lrSet)[marker.index, parent.index]),
		  chrom=chromosome(lrSet)[marker.index],
		  maploc=position(lrSet)[marker.index],
		  data.type="logratio",
		  sampleid=sampleNames(lrSet)[parent.index])
smu.object <- smooth.CNA(CNA.object)
tmp <- segment(smu.object, verbose=0, alpha=0.1)
cbs.segs1 <- cbind(tmp@output, tmp@segRows)
##cbs.segs1 <- print(tmp, showSegRows=TRUE, fullOutput=TRUE)

## offspring
CNA.object <- CNA(genomdat=as.matrix(logR(lrSet)[marker.index, offspring.index]),
		  chrom=chromosome(lrSet)[marker.index],
		  maploc=position(lrSet)[marker.index],
		  data.type="logratio",
		  sampleid=sampleNames(lrSet)[offspring.index])
smu.object <- smooth.CNA(CNA.object)
tmp <- segment(smu.object, verbose=0, alpha=0.01)
cbs.segs2 <- cbind(tmp@output, tmp@segRows)
##cbs.segs2 <- print(tmp, showSegRows=TRUE, fullOutput=TRUE)

cbs.segs <- rbind(cbs.segs1, cbs.segs2)
save(cbs.segs, file=file.path(outdir, paste("cbs.segs_chr", CHR, "_batch", batch, ".rda", sep="")))
q("no")
